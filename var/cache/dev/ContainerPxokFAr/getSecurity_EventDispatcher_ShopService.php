<?php

namespace ContainerPxokFAr;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_EventDispatcher_ShopService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'security.event_dispatcher.shop' shared service.
     *
     * @return \Symfony\Component\EventDispatcher\EventDispatcher
     */
    public static function do($container, $lazyLoad = true)
    {
        $container->privates['security.event_dispatcher.shop'] = $instance = new \Symfony\Component\EventDispatcher\EventDispatcher();

        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => function () use ($container) {
            return ($container->privates['security.logout.listener.legacy_success_listener.shop'] ?? $container->load('getSecurity_Logout_Listener_LegacySuccessListener_ShopService'));
        }, 1 => 'onLogout'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => function () use ($container) {
            return ($container->privates['security.logout.listener.remember_me.shop'] ?? $container->load('getSecurity_Logout_Listener_RememberMe_ShopService'));
        }, 1 => 'onLogout'], 0);
        $instance->addListener('security.interactive_login', [0 => function () use ($container) {
            return ($container->privates['sylius.admin_user.listener.update_user_encoder'] ?? $container->load('getSylius_AdminUser_Listener_UpdateUserEncoderService'));
        }, 1 => 'onSecurityInteractiveLogin'], 0);
        $instance->addListener('security.interactive_login', [0 => function () use ($container) {
            return ($container->privates['sylius.shop_user.listener.update_user_encoder'] ?? $container->load('getSylius_ShopUser_Listener_UpdateUserEncoderService'));
        }, 1 => 'onSecurityInteractiveLogin'], 0);
        $instance->addListener('security.interactive_login', [0 => function () use ($container) {
            return ($container->services['sylius.listener.shop_cart_blamer'] ?? $container->load('getSylius_Listener_ShopCartBlamerService'));
        }, 1 => 'onInteractiveLogin'], 0);
        $instance->addListener('security.interactive_login', [0 => function () use ($container) {
            return ($container->services['sylius.listener.user_cart_recalculation'] ?? $container->load('getSylius_Listener_UserCartRecalculationService'));
        }, 1 => 'recalculateCartWhileLogin'], 0);
        $instance->addListener('security.interactive_login', [0 => function () use ($container) {
            return ($container->privates['sylius.listener.api_cart_blamer'] ?? $container->load('getSylius_Listener_ApiCartBlamerService'));
        }, 1 => 'onInteractiveLogin'], 0);
        $instance->addListener('security.interactive_login', [0 => function () use ($container) {
            return ($container->privates['sylius.listener.admin_user_last_login'] ?? $container->load('getSylius_Listener_AdminUserLastLoginService'));
        }, 1 => 'onSecurityInteractiveLogin'], 0);
        $instance->addListener('security.interactive_login', [0 => function () use ($container) {
            return ($container->privates['sylius.listener.shop_user_last_login'] ?? $container->load('getSylius_Listener_ShopUserLastLoginService'));
        }, 1 => 'onSecurityInteractiveLogin'], 0);
        $instance->addListener('security.interactive_login', [0 => function () use ($container) {
            return ($container->privates['sylius.listener.oauth_user_last_login'] ?? $container->load('getSylius_Listener_OauthUserLastLoginService'));
        }, 1 => 'onSecurityInteractiveLogin'], 0);
        $instance->addListener('Symfony\\Component\\Security\\Http\\Event\\LogoutEvent', [0 => function () use ($container) {
            return ($container->privates['security.logout.listener.csrf_token_clearing'] ?? $container->load('getSecurity_Logout_Listener_CsrfTokenClearingService'));
        }, 1 => 'onLogout'], 0);

        return $instance;
    }
}
