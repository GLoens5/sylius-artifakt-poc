<?php

namespace ContainerPxokFAr;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authentication_Listener_Form_AdminService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'security.authentication.listener.form.admin' shared service.
     *
     * @return \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener
     *
     * @deprecated Since symfony/security-bundle 5.3: The "security.authentication.listener.form.admin" service is deprecated, use the new authenticator system instead.
     */
    public static function do($container, $lazyLoad = true)
    {
        trigger_deprecation('symfony/security-bundle', '5.3', 'The "security.authentication.listener.form.admin" service is deprecated, use the new authenticator system instead.');

        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/AuthenticationSuccessHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Util/TargetPathTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/DefaultAuthenticationSuccessHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/AuthenticationFailureHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Authentication/DefaultAuthenticationFailureHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Session/SessionAuthenticationStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Session/SessionAuthenticationStrategy.php';

        $a = ($container->privates['security.http_utils'] ?? $container->load('getSecurity_HttpUtilsService'));
        $b = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler($a, []);
        $b->setOptions(['login_path' => 'sylius_admin_login', 'default_target_path' => 'sylius_admin_dashboard', 'use_referer' => true, 'always_use_default_target_path' => false, 'target_path_parameter' => '_target_path']);
        $b->setFirewallName('admin');
        $c = ($container->privates['monolog.logger.security'] ?? $container->load('getMonolog_Logger_SecurityService'));

        $d = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler(($container->services['http_kernel'] ?? $container->getHttpKernelService()), $a, [], $c);
        $d->setOptions(['login_path' => 'sylius_admin_login', 'failure_path' => 'sylius_admin_login', 'failure_forward' => false, 'failure_path_parameter' => '_failure_path']);

        $container->privates['security.authentication.listener.form.admin'] = $instance = new \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener(($container->services['.container.private.security.token_storage'] ?? $container->get_Container_Private_Security_TokenStorageService()), ($container->services['security.authentication_manager'] ?? $container->load('getSecurity_AuthenticationManagerService')), ($container->privates['security.authentication.session_strategy'] ?? ($container->privates['security.authentication.session_strategy'] = new \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy('migrate'))), $a, 'admin', $b, $d, ['login_path' => 'sylius_admin_login', 'check_path' => 'sylius_admin_login_check', 'use_forward' => false, 'csrf_parameter' => '_csrf_admin_security_token', 'csrf_token_id' => 'admin_authenticate', 'require_previous_session' => false, 'username_parameter' => '_username', 'password_parameter' => '_password', 'enable_csrf' => false, 'post_only' => true, 'form_only' => false], $c, ($container->services['event_dispatcher'] ?? $container->getEventDispatcherService()), ($container->services['.container.private.security.csrf.token_manager'] ?? $container->load('get_Container_Private_Security_Csrf_TokenManagerService')));

        $instance->setRememberMeServices(($container->privates['security.authentication.rememberme.services.simplehash.admin'] ?? $container->load('getSecurity_Authentication_Rememberme_Services_Simplehash_AdminService')));

        return $instance;
    }
}
